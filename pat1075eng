//20:05 ->20:10->21:04
//PAT Judge (25)
// 1.mainly on how to set the scores, especially the score of compile error and not submit
// if you submit a compile error, then get zero score.But you don't submit that problem, then get a -.
//if all the score is no more than -1 at all your problems, then you should not in the rank list.
// for the rank of the list, you should print the rank first, and then printout the students with the same rank
// and then add the increment of rank.

#include <stdio.h>
#include <stdlib.h>

struct Student
{
	int id;
	int prs[6];
	int canPass;
	int total;
	int prefect;
};

Student stu[10003];
int marks[6];
int n,k,m;
void showStu(Student st);
int cmp(const void *a,const void *b)
{
	Student x = *((Student *)a);
	Student y = *((Student *)b);
	if(x.canPass!=y.canPass)
	{
		return y.canPass - x.canPass;
	}else
	{
		if(x.total!=y.total)
		{
			return y.total - x.total;
		}else
		{
			if(x.prefect!=y.prefect)
			{
				return y.prefect - x.prefect;
			}else
			{
				return x.id - y.id;
			}
		}
	}
}
int main()
{
	int i,j,uId,pId,mark,t,totalPass;
	scanf("%d%d%d",&n,&k,&m);
	for(i=1;i<=k;i++)
	{
		scanf("%d",&marks[i]);
	}
	for(i=0;i<=n;i++)
	{
		for(j=0;j<6;j++)
		{
			stu[i].prs[j] = -1;
		}
	}
	for(i=0;i<m;i++)
	{
		scanf("%d%d%d",&uId,&pId,&mark);
		stu[uId].id = uId;
		// for the mark set
		if(mark>stu[uId].prs[pId])
		{
			stu[uId].prs[pId] = mark;
			if(mark==marks[pId])
			{
				stu[uId].prefect++;
			}
		}else
		{// can pass the compile
			if(mark==-1 &&stu[uId].prs[pId]==-1)
			{
				stu[uId].prs[pId] = 0;
			}
		}
		// at least one problem at least one time pass compile
		if(mark!=-1 && stu[uId].canPass==0)
		{
			stu[uId].canPass = 1;
		}
	}
	totalPass = 0;
	for(i=1;i<=n;i++)
	{
		t = 0;
		for(j=1;j<6;j++)
		{
			if(stu[i].prs[j]!=-1)
			{
				t+=stu[i].prs[j];
			}
		}
		if(stu[i].canPass)
		{
			totalPass++;
		}
		stu[i].total = t;
	}
	qsort(&stu[1],n,sizeof(struct Student),cmp);
	int rank = 1,equals = 0;
	totalPass+=1;// need more one;
	for(i=1;i<totalPass;)
	{
		printf("%d ",rank);
		showStu(stu[i]);
		i++;
		equals = 1;
		while(i<totalPass &&  stu[i].total==stu[i-1].total)
		{
			printf("%d ",rank);
			showStu(stu[i]);
			equals++;
			i++;
		}
		rank+=equals;
	}
	return 0;
}
void showStu(Student st)
{
	int j = 0;
		printf("%05d %d",st.id,st.total);
			for(j=1;j<=k;j++)
			{
				if(st.prs[j]==-1)
				{
					printf(" -");
				}else
				{
					printf(" %d",st.prs[j]);
				}
			}
			printf("\n");
			return ;
}
